#ifndef V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_
#define V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/execution/frames.h"
#include "torque-generated/csa-types-tq.h"
#include "torque-generated/internal-class-definitions-tq.h"
namespace v8 {
namespace internal {
class V8_EXPORT_PRIVATE TorqueGeneratedExportedMacrosAssembler {
 public:
  explicit TorqueGeneratedExportedMacrosAssembler(compiler::CodeAssemblerState* state) : state_(state) {
    USE(state_);
  }
  TorqueStructArgumentsInfo GetArgumentsFrameAndCount(compiler::TNode<Context> p_context, compiler::TNode<JSFunction> p_f);
  compiler::TNode<Object> RequireObjectCoercible(compiler::TNode<Context> p_context, compiler::TNode<Object> p_value, const char* p_name);
  compiler::TNode<BoolT> IsFastJSArray(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context);
  void BranchIfFastJSArray(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIfFastJSArrayForRead(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  compiler::TNode<BoolT> IsFastJSArrayWithNoCustomIteration(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<String> ToStringImpl(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<BoolT> IsIntegerOrSomeInfinity(compiler::TNode<Object> p_o);
  compiler::TNode<BoolT> IsCanonicalized(compiler::TNode<BigInt> p_bigint);
  TorqueStructKeyValuePair LoadKeyValuePairNoSideEffects(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_MayHaveSideEffects);
  TorqueStructKeyValuePair LoadKeyValuePair(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSFunction> LoadTargetFromFrame();
  compiler::TNode<Smi> SlotCount(compiler::TNode<FixedArray> p_coverageInfo);
  compiler::TNode<BoolT> IsFastRegExpPermissive(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o);
  compiler::TNode<JSTypedArray> TypedArraySpeciesCreateByLength(compiler::TNode<Context> p_context, const char* p_methodName, compiler::TNode<JSTypedArray> p_exemplar, compiler::TNode<Smi> p_length);
  void TestConstexpr1();
  void TestConstexprIf();
  void TestConstexprReturn();
  compiler::TNode<Oddball> TestGotoLabel();
  compiler::TNode<Oddball> TestGotoLabelWithOneParameter();
  compiler::TNode<Oddball> TestGotoLabelWithTwoParameters();
  void TestBuiltinSpecialization(compiler::TNode<Context> p_c);
  compiler::TNode<Oddball> TestPartiallyUnusedLabel();
  void TestMacroSpecialization();
  compiler::TNode<Oddball> TestFunctionPointers(compiler::TNode<Context> p_context);
  compiler::TNode<Oddball> TestVariableRedeclaration(compiler::TNode<Context> p_context);
  compiler::TNode<Smi> TestTernaryOperator(compiler::TNode<Smi> p_x);
  void TestFunctionPointerToGeneric(compiler::TNode<Context> p_c);
  compiler::TNode<BuiltinPtr> TestTypeAlias(compiler::TNode<BuiltinPtr> p_x);
  compiler::TNode<Oddball> TestUnsafeCast(compiler::TNode<Context> p_context, compiler::TNode<Number> p_n);
  void TestHexLiteral();
  void TestLargeIntegerLiterals(compiler::TNode<Context> p_c);
  void TestMultilineAssert();
  void TestNewlineInString();
  void TestModuleConstBindings();
  void TestLocalConstBindings();
  compiler::TNode<Smi> TestStruct1(TorqueStructTestStructA p_i);
  TorqueStructTestStructA TestStruct2(compiler::TNode<Context> p_context);
  TorqueStructTestStructA TestStruct3(compiler::TNode<Context> p_context);
  TorqueStructTestStructC TestStruct4(compiler::TNode<Context> p_context);
  void CallTestStructInLabel(compiler::TNode<Context> p_context);
  void TestForLoop();
  void TestSubtyping(compiler::TNode<Smi> p_x);
  void TestTypeswitch(compiler::TNode<Context> p_context);
  void TestTypeswitchAsanLsanFailure(compiler::TNode<Context> p_context, compiler::TNode<Object> p_obj);
  void TestGenericOverload(compiler::TNode<Context> p_context);
  void TestEquality(compiler::TNode<Context> p_context);
  compiler::TNode<BoolT> TestOrAnd(compiler::TNode<BoolT> p_x, compiler::TNode<BoolT> p_y, compiler::TNode<BoolT> p_z);
  compiler::TNode<BoolT> TestAndOr(compiler::TNode<BoolT> p_x, compiler::TNode<BoolT> p_y, compiler::TNode<BoolT> p_z);
  void TestLogicalOperators();
  compiler::TNode<Smi> TestCall(compiler::TNode<Smi> p_i, compiler::CodeAssemblerLabel* label_A);
  void TestOtherwiseWithCode1();
  void TestOtherwiseWithCode2();
  void TestOtherwiseWithCode3();
  void TestForwardLabel();
  void TestQualifiedAccess(compiler::TNode<Context> p_context);
  compiler::TNode<Smi> TestCatch1(compiler::TNode<Context> p_context);
  void TestCatch2Wrapper(compiler::TNode<Context> p_context);
  compiler::TNode<Smi> TestCatch2(compiler::TNode<Context> p_context);
  void TestCatch3WrapperWithLabel(compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label__Abort);
  compiler::TNode<Smi> TestCatch3(compiler::TNode<Context> p_context);
  void TestIterator(compiler::TNode<Context> p_context, compiler::TNode<JSReceiver> p_o, compiler::TNode<Map> p_map);
  void TestFrame1(compiler::TNode<Context> p_context);
  void TestNew(compiler::TNode<Context> p_context);
  void TestStructConstructor(compiler::TNode<Context> p_context);
  void TestInternalClass(compiler::TNode<Context> p_context);
  void TestConstInStructs();
  compiler::TNode<Object> TestNewFixedArrayFromSpread(compiler::TNode<Context> p_context);
  void TestReferences();
  void TestSlices();
  compiler::TNode<Oddball> TestSliceEnumeration(compiler::TNode<Context> p_context);
  void TestStaticAssert();
  void TestLoadEliminationFixed(compiler::TNode<Context> p_context);
  void TestLoadEliminationVariable(compiler::TNode<Context> p_context);
  compiler::TNode<Smi> TestRedundantArrayElementCheck(compiler::TNode<Context> p_context);
  compiler::TNode<Smi> TestRedundantSmiCheck(compiler::TNode<Context> p_context);
  compiler::TNode<IntPtrT> TestGenericStruct1();
  TorqueStructTestTuple24TestTuple8ATintptr5ATSmi24TestTuple5ATSmi8ATintptr TestGenericStruct2();
  void TestBranchOnBoolOptimization(compiler::TNode<Context> p_context, compiler::TNode<Smi> p_input);
  compiler::TNode<Map> LoadHeapObjectMap(compiler::TNode<HeapObject> p_o);
  void StoreHeapObjectMap(compiler::TNode<HeapObject> p_o, compiler::TNode<Map> p_v);
  compiler::TNode<Smi> LoadContextLength(compiler::TNode<Context> p_o);
  void StoreContextLength(compiler::TNode<Context> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<ScopeInfo> LoadContextScopeInfo(compiler::TNode<Context> p_o);
  void StoreContextScopeInfo(compiler::TNode<Context> p_o, compiler::TNode<ScopeInfo> p_v);
  compiler::TNode<Object> LoadContextPrevious(compiler::TNode<Context> p_o);
  void StoreContextPrevious(compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadContextExtension(compiler::TNode<Context> p_o);
  void StoreContextExtension(compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadContextNativeContext(compiler::TNode<Context> p_o);
  void StoreContextNativeContext(compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSReceiverPropertiesOrHash(compiler::TNode<JSReceiver> p_o);
  void StoreJSReceiverPropertiesOrHash(compiler::TNode<JSReceiver> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Float64T> LoadHeapNumberValue(compiler::TNode<HeapNumber> p_o);
  void StoreHeapNumberValue(compiler::TNode<HeapNumber> p_o, compiler::TNode<Float64T> p_v);
  compiler::TNode<Uint32T> LoadNameHashField(compiler::TNode<Name> p_o);
  void StoreNameHashField(compiler::TNode<Name> p_o, compiler::TNode<Uint32T> p_v);
  compiler::TNode<Int32T> LoadStringLength(compiler::TNode<String> p_o);
  void StoreStringLength(compiler::TNode<String> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSymbolFlags(compiler::TNode<Symbol> p_o);
  void StoreSymbolFlags(compiler::TNode<Symbol> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Object> LoadSymbolName(compiler::TNode<Symbol> p_o);
  void StoreSymbolName(compiler::TNode<Symbol> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Float64T> LoadOddballToNumberRaw(compiler::TNode<Oddball> p_o);
  void StoreOddballToNumberRaw(compiler::TNode<Oddball> p_o, compiler::TNode<Float64T> p_v);
  compiler::TNode<String> LoadOddballToString(compiler::TNode<Oddball> p_o);
  void StoreOddballToString(compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Number> LoadOddballToNumber(compiler::TNode<Oddball> p_o);
  void StoreOddballToNumber(compiler::TNode<Oddball> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<String> LoadOddballTypeOf(compiler::TNode<Oddball> p_o);
  void StoreOddballTypeOf(compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Smi> LoadOddballKind(compiler::TNode<Oddball> p_o);
  void StoreOddballKind(compiler::TNode<Oddball> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadFixedArrayBaseLength(compiler::TNode<FixedArrayBase> p_o);
  void StoreFixedArrayBaseLength(compiler::TNode<FixedArrayBase> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadConsStringFirst(compiler::TNode<ConsString> p_o);
  void StoreConsStringFirst(compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
  compiler::TNode<String> LoadConsStringSecond(compiler::TNode<ConsString> p_o);
  void StoreConsStringSecond(compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
  compiler::TNode<RawPtrT> LoadExternalStringResource(compiler::TNode<ExternalString> p_o);
  void StoreExternalStringResource(compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<RawPtrT> LoadExternalStringResourceData(compiler::TNode<ExternalString> p_o);
  void StoreExternalStringResourceData(compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<String> LoadSlicedStringParent(compiler::TNode<SlicedString> p_o);
  void StoreSlicedStringParent(compiler::TNode<SlicedString> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Smi> LoadSlicedStringOffset(compiler::TNode<SlicedString> p_o);
  void StoreSlicedStringOffset(compiler::TNode<SlicedString> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadThinStringActual(compiler::TNode<ThinString> p_o);
  void StoreThinStringActual(compiler::TNode<ThinString> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Object> LoadTuple2Value1(compiler::TNode<Tuple2> p_o);
  void StoreTuple2Value1(compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTuple2Value2(compiler::TNode<Tuple2> p_o);
  void StoreTuple2Value2(compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTuple3Value3(compiler::TNode<Tuple3> p_o);
  void StoreTuple3Value3(compiler::TNode<Tuple3> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadWeakFixedArrayLength(compiler::TNode<WeakFixedArray> p_o);
  void StoreWeakFixedArrayLength(compiler::TNode<WeakFixedArray> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Uint8T> LoadMapInstanceSizeInWords(compiler::TNode<Map> p_o);
  void StoreMapInstanceSizeInWords(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex(compiler::TNode<Map> p_o);
  void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords(compiler::TNode<Map> p_o);
  void StoreMapUsedOrUnusedInstanceSizeInWords(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint8T> LoadMapVisitorId(compiler::TNode<Map> p_o);
  void StoreMapVisitorId(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint16T> LoadMapInstanceType(compiler::TNode<Map> p_o);
  void StoreMapInstanceType(compiler::TNode<Map> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Uint8T> LoadMapBitField(compiler::TNode<Map> p_o);
  void StoreMapBitField(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint8T> LoadMapBitField2(compiler::TNode<Map> p_o);
  void StoreMapBitField2(compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
  compiler::TNode<Uint32T> LoadMapBitField3(compiler::TNode<Map> p_o);
  void StoreMapBitField3(compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
  compiler::TNode<HeapObject> LoadMapPrototype(compiler::TNode<Map> p_o);
  void StoreMapPrototype(compiler::TNode<Map> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadMapConstructorOrBackPointer(compiler::TNode<Map> p_o);
  void StoreMapConstructorOrBackPointer(compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<DescriptorArray> LoadMapInstanceDescriptors(compiler::TNode<Map> p_o);
  void StoreMapInstanceDescriptors(compiler::TNode<Map> p_o, compiler::TNode<DescriptorArray> p_v);
  compiler::TNode<WeakFixedArray> LoadMapDependentCode(compiler::TNode<Map> p_o);
  void StoreMapDependentCode(compiler::TNode<Map> p_o, compiler::TNode<WeakFixedArray> p_v);
  compiler::TNode<Object> LoadMapPrototypeValidityCell(compiler::TNode<Map> p_o);
  void StoreMapPrototypeValidityCell(compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadMapTransitionsOrPrototypeInfo(compiler::TNode<Map> p_o);
  void StoreMapTransitionsOrPrototypeInfo(compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadEnumCacheKeys(compiler::TNode<EnumCache> p_o);
  void StoreEnumCacheKeys(compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadEnumCacheIndices(compiler::TNode<EnumCache> p_o);
  void StoreEnumCacheIndices(compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable(compiler::TNode<SourcePositionTableWithFrameCache> p_o);
  void StoreSourcePositionTableWithFrameCacheSourcePositionTable(compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache(compiler::TNode<SourcePositionTableWithFrameCache> p_o);
  void StoreSourcePositionTableWithFrameCacheStackFrameCache(compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors(compiler::TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayNumberOfAllDescriptors(compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors(compiler::TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayNumberOfDescriptors(compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors(compiler::TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayRawNumberOfMarkedDescriptors(compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Uint16T> LoadDescriptorArrayFiller16Bits(compiler::TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayFiller16Bits(compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<EnumCache> LoadDescriptorArrayEnumCache(compiler::TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayEnumCache(compiler::TNode<DescriptorArray> p_o, compiler::TNode<EnumCache> p_v);
  compiler::TNode<FixedArrayBase> LoadJSObjectElements(compiler::TNode<JSObject> p_o);
  void StoreJSObjectElements(compiler::TNode<JSObject> p_o, compiler::TNode<FixedArrayBase> p_v);
  compiler::TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionSharedFunctionInfo(compiler::TNode<JSFunction> p_o, compiler::TNode<SharedFunctionInfo> p_v);
  compiler::TNode<Context> LoadJSFunctionContext(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionContext(compiler::TNode<JSFunction> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<FeedbackCell> LoadJSFunctionFeedbackCell(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionFeedbackCell(compiler::TNode<JSFunction> p_o, compiler::TNode<FeedbackCell> p_v);
  compiler::TNode<Code> LoadJSFunctionCode(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionCode(compiler::TNode<JSFunction> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionPrototypeOrInitialMap(compiler::TNode<JSFunction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSProxyTarget(compiler::TNode<JSProxy> p_o);
  void StoreJSProxyTarget(compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSProxyHandler(compiler::TNode<JSProxy> p_o);
  void StoreJSProxyHandler(compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadJSProxyRevocableResultProxy(compiler::TNode<JSProxyRevocableResult> p_o);
  void StoreJSProxyRevocableResultProxy(compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSProxyRevocableResultRevoke(compiler::TNode<JSProxyRevocableResult> p_o);
  void StoreJSProxyRevocableResultRevoke(compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSGlobalProxyNativeContext(compiler::TNode<JSGlobalProxy> p_o);
  void StoreJSGlobalProxyNativeContext(compiler::TNode<JSGlobalProxy> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSPrimitiveWrapperValue(compiler::TNode<JSPrimitiveWrapper> p_o);
  void StoreJSPrimitiveWrapperValue(compiler::TNode<JSPrimitiveWrapper> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSArgumentsObjectWithLengthLength(compiler::TNode<JSArgumentsObjectWithLength> p_o);
  void StoreJSArgumentsObjectWithLengthLength(compiler::TNode<JSArgumentsObjectWithLength> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSSloppyArgumentsObjectCallee(compiler::TNode<JSSloppyArgumentsObject> p_o);
  void StoreJSSloppyArgumentsObjectCallee(compiler::TNode<JSSloppyArgumentsObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<JSReceiver> LoadJSArrayIteratorIteratedObject(compiler::TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorIteratedObject(compiler::TNode<JSArrayIterator> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Number> LoadJSArrayIteratorNextIndex(compiler::TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorNextIndex(compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<Smi> LoadJSArrayIteratorKind(compiler::TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorKind(compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Number> LoadJSArrayLength(compiler::TNode<JSArray> p_o);
  void StoreJSArrayLength(compiler::TNode<JSArray> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<Object> LoadCallHandlerInfoCallback(compiler::TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoCallback(compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadCallHandlerInfoJsCallback(compiler::TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoJsCallback(compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadCallHandlerInfoData(compiler::TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoData(compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadModuleExports(compiler::TNode<Module> p_o);
  void StoreModuleExports(compiler::TNode<Module> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Smi> LoadModuleHash(compiler::TNode<Module> p_o);
  void StoreModuleHash(compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadModuleStatus(compiler::TNode<Module> p_o);
  void StoreModuleStatus(compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadModuleModuleNamespace(compiler::TNode<Module> p_o);
  void StoreModuleModuleNamespace(compiler::TNode<Module> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadModuleException(compiler::TNode<Module> p_o);
  void StoreModuleException(compiler::TNode<Module> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadSourceTextModuleCode(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleCode(compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<FixedArray> LoadSourceTextModuleRegularExports(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRegularExports(compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadSourceTextModuleRegularImports(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRegularImports(compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadSourceTextModuleRequestedModules(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRequestedModules(compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Script> LoadSourceTextModuleScript(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleScript(compiler::TNode<SourceTextModule> p_o, compiler::TNode<Script> p_v);
  compiler::TNode<HeapObject> LoadSourceTextModuleImportMeta(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleImportMeta(compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleDfsIndex(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleDfsIndex(compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleDfsAncestorIndex(compiler::TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleDfsAncestorIndex(compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadSyntheticModuleName(compiler::TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleName(compiler::TNode<SyntheticModule> p_o, compiler::TNode<String> p_v);
  compiler::TNode<FixedArray> LoadSyntheticModuleExportNames(compiler::TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleExportNames(compiler::TNode<SyntheticModule> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Foreign> LoadSyntheticModuleEvaluationSteps(compiler::TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleEvaluationSteps(compiler::TNode<SyntheticModule> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Module> LoadJSModuleNamespaceModule(compiler::TNode<JSModuleNamespace> p_o);
  void StoreJSModuleNamespaceModule(compiler::TNode<JSModuleNamespace> p_o, compiler::TNode<Module> p_v);
  compiler::TNode<Object> LoadJSWeakCollectionTable(compiler::TNode<JSWeakCollection> p_o);
  void StoreJSWeakCollectionTable(compiler::TNode<JSWeakCollection> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSCollectionIteratorTable(compiler::TNode<JSCollectionIterator> p_o);
  void StoreJSCollectionIteratorTable(compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSCollectionIteratorIndex(compiler::TNode<JSCollectionIterator> p_o);
  void StoreJSCollectionIteratorIndex(compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadJSMessageObjectMessageType(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectMessageType(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadJSMessageObjectArguments(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectArguments(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Script> LoadJSMessageObjectScript(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectScript(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Script> p_v);
  compiler::TNode<Object> LoadJSMessageObjectStackFrames(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectStackFrames(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadJSMessageObjectSharedInfo(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectSharedInfo(compiler::TNode<JSMessageObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSMessageObjectBytecodeOffset(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectBytecodeOffset(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadJSMessageObjectStartPosition(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectStartPosition(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadJSMessageObjectEndPosition(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectEndPosition(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadJSMessageObjectErrorLevel(compiler::TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectErrorLevel(compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWeakArrayListCapacity(compiler::TNode<WeakArrayList> p_o);
  void StoreWeakArrayListCapacity(compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWeakArrayListLength(compiler::TNode<WeakArrayList> p_o);
  void StoreWeakArrayListLength(compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoJsModuleNamespace(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadPrototypeInfoPrototypeUsers(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoPrototypeUsers(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadPrototypeInfoRegistrySlot(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoRegistrySlot(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadPrototypeInfoValidityCell(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoValidityCell(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadPrototypeInfoObjectCreateMap(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoObjectCreateMap(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadPrototypeInfoBitField(compiler::TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoBitField(compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptSource(compiler::TNode<Script> p_o);
  void StoreScriptSource(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadScriptName(compiler::TNode<Script> p_o);
  void StoreScriptName(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadScriptLineOffset(compiler::TNode<Script> p_o);
  void StoreScriptLineOffset(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadScriptColumnOffset(compiler::TNode<Script> p_o);
  void StoreScriptColumnOffset(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptContext(compiler::TNode<Script> p_o);
  void StoreScriptContext(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadScriptScriptType(compiler::TNode<Script> p_o);
  void StoreScriptScriptType(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptLineEnds(compiler::TNode<Script> p_o);
  void StoreScriptLineEnds(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadScriptId(compiler::TNode<Script> p_o);
  void StoreScriptId(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments(compiler::TNode<Script> p_o);
  void StoreScriptEvalFromSharedOrWrappedArguments(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadScriptEvalFromPosition(compiler::TNode<Script> p_o);
  void StoreScriptEvalFromPosition(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptSharedFunctionInfos(compiler::TNode<Script> p_o);
  void StoreScriptSharedFunctionInfos(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadScriptFlags(compiler::TNode<Script> p_o);
  void StoreScriptFlags(compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadScriptSourceUrl(compiler::TNode<Script> p_o);
  void StoreScriptSourceUrl(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadScriptSourceMappingUrl(compiler::TNode<Script> p_o);
  void StoreScriptSourceMappingUrl(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadScriptHostDefinedOptions(compiler::TNode<Script> p_o);
  void StoreScriptHostDefinedOptions(compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadEmbedderDataArrayLength(compiler::TNode<EmbedderDataArray> p_o);
  void StoreEmbedderDataArrayLength(compiler::TNode<EmbedderDataArray> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Int32T> LoadPreparseDataDataLength(compiler::TNode<PreparseData> p_o);
  void StorePreparseDataDataLength(compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadPreparseDataInnerLength(compiler::TNode<PreparseData> p_o);
  void StorePreparseDataInnerLength(compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<BytecodeArray> LoadInterpreterDataBytecodeArray(compiler::TNode<InterpreterData> p_o);
  void StoreInterpreterDataBytecodeArray(compiler::TNode<InterpreterData> p_o, compiler::TNode<BytecodeArray> p_v);
  compiler::TNode<Code> LoadInterpreterDataInterpreterTrampoline(compiler::TNode<InterpreterData> p_o);
  void StoreInterpreterDataInterpreterTrampoline(compiler::TNode<InterpreterData> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<Object> LoadSharedFunctionInfoFunctionData(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionData(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoNameOrScopeInfo(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoScriptOrDebugInfo(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Int16T> LoadSharedFunctionInfoLength(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoLength(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
  compiler::TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFormalParameterCount(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoExpectedNofProperties(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
  compiler::TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionTokenOffset(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoFlags(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFlags(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionLiteralId(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundTargetFunction(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Object> LoadJSBoundFunctionBoundThis(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundThis(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadJSBoundFunctionBoundArguments(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundArguments(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<RawPtrT> LoadForeignForeignAddress(compiler::TNode<Foreign> p_o);
  void StoreForeignForeignAddress(compiler::TNode<Foreign> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<Smi> LoadFreeSpaceSize(compiler::TNode<FreeSpace> p_o);
  void StoreFreeSpaceSize(compiler::TNode<FreeSpace> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadFreeSpaceNext(compiler::TNode<FreeSpace> p_o);
  void StoreFreeSpaceNext(compiler::TNode<FreeSpace> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferByteLength(compiler::TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferByteLength(compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<RawPtrT> LoadJSArrayBufferBackingStore(compiler::TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferBackingStore(compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewBuffer(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<JSArrayBuffer> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteOffset(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteOffset(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteLength(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteLength(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<UintPtrT> LoadJSTypedArrayLength(compiler::TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayLength(compiler::TNode<JSTypedArray> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<RawPtrT> LoadJSTypedArrayExternalPointer(compiler::TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayExternalPointer(compiler::TNode<JSTypedArray> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<Object> LoadJSTypedArrayBasePointer(compiler::TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayBasePointer(compiler::TNode<JSTypedArray> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSCollectionTable(compiler::TNode<JSCollection> p_o);
  void StoreJSCollectionTable(compiler::TNode<JSCollection> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateValue(compiler::TNode<JSDate> p_o);
  void StoreJSDateValue(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateYear(compiler::TNode<JSDate> p_o);
  void StoreJSDateYear(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateMonth(compiler::TNode<JSDate> p_o);
  void StoreJSDateMonth(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateDay(compiler::TNode<JSDate> p_o);
  void StoreJSDateDay(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateWeekday(compiler::TNode<JSDate> p_o);
  void StoreJSDateWeekday(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateHour(compiler::TNode<JSDate> p_o);
  void StoreJSDateHour(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateMin(compiler::TNode<JSDate> p_o);
  void StoreJSDateMin(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateSec(compiler::TNode<JSDate> p_o);
  void StoreJSDateSec(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSDateCacheStamp(compiler::TNode<JSDate> p_o);
  void StoreJSDateCacheStamp(compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<NativeContext> LoadJSGlobalObjectNativeContext(compiler::TNode<JSGlobalObject> p_o);
  void StoreJSGlobalObjectNativeContext(compiler::TNode<JSGlobalObject> p_o, compiler::TNode<NativeContext> p_v);
  compiler::TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy(compiler::TNode<JSGlobalObject> p_o);
  void StoreJSGlobalObjectGlobalProxy(compiler::TNode<JSGlobalObject> p_o, compiler::TNode<JSGlobalProxy> p_v);
  compiler::TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator(compiler::TNode<JSAsyncFromSyncIterator> p_o);
  void StoreJSAsyncFromSyncIteratorSyncIterator(compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Object> LoadJSAsyncFromSyncIteratorNext(compiler::TNode<JSAsyncFromSyncIterator> p_o);
  void StoreJSAsyncFromSyncIteratorNext(compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<String> LoadJSStringIteratorString(compiler::TNode<JSStringIterator> p_o);
  void StoreJSStringIteratorString(compiler::TNode<JSStringIterator> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Smi> LoadJSStringIteratorNextIndex(compiler::TNode<JSStringIterator> p_o);
  void StoreJSStringIteratorNextIndex(compiler::TNode<JSStringIterator> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadTemplateInfoTag(compiler::TNode<TemplateInfo> p_o);
  void StoreTemplateInfoTag(compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTemplateInfoSerialNumber(compiler::TNode<TemplateInfo> p_o);
  void StoreTemplateInfoSerialNumber(compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadTemplateInfoNumberOfProperties(compiler::TNode<TemplateInfo> p_o);
  void StoreTemplateInfoNumberOfProperties(compiler::TNode<TemplateInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadTemplateInfoPropertyList(compiler::TNode<TemplateInfo> p_o);
  void StoreTemplateInfoPropertyList(compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTemplateInfoPropertyAccessors(compiler::TNode<TemplateInfo> p_o);
  void StoreTemplateInfoPropertyAccessors(compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings(compiler::TNode<TemplateObjectDescription> p_o);
  void StoreTemplateObjectDescriptionRawStrings(compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings(compiler::TNode<TemplateObjectDescription> p_o);
  void StoreTemplateObjectDescriptionCookedStrings(compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataPrototypeTemplate(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataPrototypeProviderTemplate(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataParentTemplate(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataParentTemplate(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataNamedPropertyHandler(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataIndexedPropertyHandler(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataInstanceTemplate(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataInstanceCallHandler(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo(compiler::TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataAccessCheckInfo(compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateInfoCallCode(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoCallCode(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateInfoClassName(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoClassName(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadFunctionTemplateInfoSignature(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoSignature(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadFunctionTemplateInfoRareData(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoRareData(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoSharedFunctionInfo(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadFunctionTemplateInfoFlag(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoFlag(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadFunctionTemplateInfoLength(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoLength(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadFunctionTemplateInfoCachedPropertyName(compiler::TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoCachedPropertyName(compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadObjectTemplateInfoConstructor(compiler::TNode<ObjectTemplateInfo> p_o);
  void StoreObjectTemplateInfoConstructor(compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadObjectTemplateInfoData(compiler::TNode<ObjectTemplateInfo> p_o);
  void StoreObjectTemplateInfoData(compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadPropertyArrayLengthAndHash(compiler::TNode<PropertyArray> p_o);
  void StorePropertyArrayLengthAndHash(compiler::TNode<PropertyArray> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Name> LoadPropertyCellName(compiler::TNode<PropertyCell> p_o);
  void StorePropertyCellName(compiler::TNode<PropertyCell> p_o, compiler::TNode<Name> p_v);
  compiler::TNode<Smi> LoadPropertyCellPropertyDetailsRaw(compiler::TNode<PropertyCell> p_o);
  void StorePropertyCellPropertyDetailsRaw(compiler::TNode<PropertyCell> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadPropertyCellValue(compiler::TNode<PropertyCell> p_o);
  void StorePropertyCellValue(compiler::TNode<PropertyCell> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<WeakFixedArray> LoadPropertyCellDependentCode(compiler::TNode<PropertyCell> p_o);
  void StorePropertyCellDependentCode(compiler::TNode<PropertyCell> p_o, compiler::TNode<WeakFixedArray> p_v);
  compiler::TNode<RawPtrT> LoadJSDataViewDataPointer(compiler::TNode<JSDataView> p_o);
  void StoreJSDataViewDataPointer(compiler::TNode<JSDataView> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<Object> LoadInterceptorInfoGetter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoGetter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoSetter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoSetter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoQuery(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoQuery(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDescriptor(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDescriptor(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDeleter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDeleter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoEnumerator(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoEnumerator(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDefiner(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDefiner(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoData(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoData(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadInterceptorInfoFlags(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoFlags(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoCallback(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoCallback(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoNamedInterceptor(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoNamedInterceptor(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoIndexedInterceptor(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoIndexedInterceptor(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoData(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoData(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadArrayBoilerplateDescriptionFlags(compiler::TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionFlags(compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements(compiler::TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionConstantElements(compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<FixedArrayBase> p_v);
  compiler::TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot(compiler::TNode<AliasedArgumentsEntry> p_o);
  void StoreAliasedArgumentsEntryAliasedContextSlot(compiler::TNode<AliasedArgumentsEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadCellValue(compiler::TNode<Cell> p_o);
  void StoreCellValue(compiler::TNode<Cell> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerSmiHandler(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerSmiHandler(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerValidityCell(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerValidityCell(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData1(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData1(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData2(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData2(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData3(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData3(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<JSFunction> LoadJSGeneratorObjectFunction(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectFunction(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<JSFunction> p_v);
  compiler::TNode<Context> LoadJSGeneratorObjectContext(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectContext(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<Object> LoadJSGeneratorObjectReceiver(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectReceiver(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSGeneratorObjectInputOrDebugPos(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectInputOrDebugPos(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadJSGeneratorObjectResumeMode(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectResumeMode(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadJSGeneratorObjectContinuation(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectContinuation(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters(compiler::TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectParametersAndRegisters(compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<JSPromise> LoadJSAsyncFunctionObjectPromise(compiler::TNode<JSAsyncFunctionObject> p_o);
  void StoreJSAsyncFunctionObjectPromise(compiler::TNode<JSAsyncFunctionObject> p_o, compiler::TNode<JSPromise> p_v);
  compiler::TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue(compiler::TNode<JSAsyncGeneratorObject> p_o);
  void StoreJSAsyncGeneratorObjectQueue(compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting(compiler::TNode<JSAsyncGeneratorObject> p_o);
  void StoreJSAsyncGeneratorObjectIsAwaiting(compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadJSPromiseReactionsOrResult(compiler::TNode<JSPromise> p_o);
  void StoreJSPromiseReactionsOrResult(compiler::TNode<JSPromise> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadJSPromiseFlags(compiler::TNode<JSPromise> p_o);
  void StoreJSPromiseFlags(compiler::TNode<JSPromise> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadCallbackTaskCallback(compiler::TNode<CallbackTask> p_o);
  void StoreCallbackTaskCallback(compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadCallbackTaskData(compiler::TNode<CallbackTask> p_o);
  void StoreCallbackTaskData(compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<JSReceiver> LoadCallableTaskCallable(compiler::TNode<CallableTask> p_o);
  void StoreCallableTaskCallable(compiler::TNode<CallableTask> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Context> LoadCallableTaskContext(compiler::TNode<CallableTask> p_o);
  void StoreCallableTaskContext(compiler::TNode<CallableTask> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoLineNumber(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoLineNumber(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoColumnNumber(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoColumnNumber(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoPromiseAllIndex(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoPromiseAllIndex(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoScriptId(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptId(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoScriptName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoScriptNameOrSourceUrl(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptNameOrSourceUrl(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoFunctionName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFunctionName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoMethodName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoMethodName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoTypeName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoTypeName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoEvalOrigin(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoEvalOrigin(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoWasmModuleName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoWasmModuleName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadStackFrameInfoWasmInstance(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoWasmInstance(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoFlag(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFlag(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadStackTraceFrameFrameArray(compiler::TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameArray(compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadStackTraceFrameFrameIndex(compiler::TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameIndex(compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadStackTraceFrameFrameInfo(compiler::TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameInfo(compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadStackTraceFrameId(compiler::TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameId(compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadClassPositionsStart(compiler::TNode<ClassPositions> p_o);
  void StoreClassPositionsStart(compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadClassPositionsEnd(compiler::TNode<ClassPositions> p_o);
  void StoreClassPositionsEnd(compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Code> LoadWasmExportedFunctionDataWrapperCode(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataWrapperCode(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<JSObject> LoadWasmExportedFunctionDataInstance(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataInstance(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<JSObject> p_v);
  compiler::TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataJumpTableOffset(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataFunctionIndex(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadWasmExportedFunctionDataCWrapperCode(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataCWrapperCode(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadWasmExportedFunctionDataWasmCallTarget(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataWasmCallTarget(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize(compiler::TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataPackedArgsSize(compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<JSReceiver> LoadWasmJSFunctionDataCallable(compiler::TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataCallable(compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Code> LoadWasmJSFunctionDataWrapperCode(compiler::TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataWrapperCode(compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount(compiler::TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedReturnCount(compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount(compiler::TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedParameterCount(compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature(compiler::TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedSignature(compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget(compiler::TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataCallTarget(compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<Foreign> LoadWasmCapiFunctionDataEmbedderData(compiler::TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataEmbedderData(compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Code> LoadWasmCapiFunctionDataWrapperCode(compiler::TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataWrapperCode(compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature(compiler::TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataSerializedSignature(compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<Uint32T> LoadWasmIndirectFunctionTableSize(compiler::TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableSize(compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<Uint32T> p_v);
  compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds(compiler::TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableSigIds(compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets(compiler::TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableTargets(compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations(compiler::TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableManagedNativeAllocations(compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<FixedArray> LoadWasmIndirectFunctionTableRefs(compiler::TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableRefs(compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<JSObject> LoadWasmDebugInfoInstance(compiler::TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoInstance(compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<JSObject> p_v);
  compiler::TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle(compiler::TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoInterpreterHandle(compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmDebugInfoLocalsNames(compiler::TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoLocalsNames(compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntries(compiler::TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoCWasmEntries(compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap(compiler::TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoCWasmEntryMap(compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadWasmExceptionTagIndex(compiler::TNode<WasmExceptionTag> p_o);
  void StoreWasmExceptionTagIndex(compiler::TNode<WasmExceptionTag> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadAsyncGeneratorRequestNext(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestNext(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadAsyncGeneratorRequestResumeMode(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestResumeMode(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAsyncGeneratorRequestValue(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestValue(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<JSPromise> LoadAsyncGeneratorRequestPromise(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestPromise(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<JSPromise> p_v);
  compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryExportName(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryExportName(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryLocalName(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryLocalName(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryImportName(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryImportName(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryModuleRequest(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryCellIndex(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleInfoEntryBegPos(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryBegPos(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSourceTextModuleInfoEntryEndPos(compiler::TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryEndPos(compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadPromiseCapabilityPromise(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityPromise(compiler::TNode<PromiseCapability> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadPromiseCapabilityResolve(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityResolve(compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadPromiseCapabilityReject(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityReject(compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadPromiseReactionNext(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionNext(compiler::TNode<PromiseReaction> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionRejectHandler(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionRejectHandler(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionFulfillHandler(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionFulfillHandler(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionPromiseOrCapability(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionPromiseOrCapability(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadPromiseReactionJobTaskArgument(compiler::TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskArgument(compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Context> LoadPromiseReactionJobTaskContext(compiler::TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskContext(compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionJobTaskHandler(compiler::TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskHandler(compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability(compiler::TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskPromiseOrCapability(compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Context> LoadPromiseResolveThenableJobTaskContext(compiler::TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskContext(compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve(compiler::TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskPromiseToResolve(compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSPromise> p_v);
  compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen(compiler::TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskThen(compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable(compiler::TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskThenable(compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<HeapObject> LoadJSRegExpData(compiler::TNode<JSRegExp> p_o);
  void StoreJSRegExpData(compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSRegExpSource(compiler::TNode<JSRegExp> p_o);
  void StoreJSRegExpSource(compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadJSRegExpFlags(compiler::TNode<JSRegExp> p_o);
  void StoreJSRegExpFlags(compiler::TNode<JSRegExp> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSRegExpResultIndex(compiler::TNode<JSRegExpResult> p_o);
  void StoreJSRegExpResultIndex(compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSRegExpResultInput(compiler::TNode<JSRegExpResult> p_o);
  void StoreJSRegExpResultInput(compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSRegExpResultGroups(compiler::TNode<JSRegExpResult> p_o);
  void StoreJSRegExpResultGroups(compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp(compiler::TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorIteratingRegExp(compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<String> LoadJSRegExpStringIteratorIteratedString(compiler::TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorIteratedString(compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Smi> LoadJSRegExpStringIteratorFlags(compiler::TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorFlags(compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAccessorInfoName(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoName(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadAccessorInfoFlags(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoFlags(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAccessorInfoExpectedReceiverType(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoExpectedReceiverType(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorInfoSetter(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoSetter(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorInfoGetter(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoGetter(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorInfoJsGetter(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoJsGetter(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorInfoData(compiler::TNode<AccessorInfo> p_o);
  void StoreAccessorInfoData(compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorPairGetter(compiler::TNode<AccessorPair> p_o);
  void StoreAccessorPairGetter(compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessorPairSetter(compiler::TNode<AccessorPair> p_o);
  void StoreAccessorPairSetter(compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoSharedFunctionInfo(compiler::TNode<DebugInfo> p_o, compiler::TNode<SharedFunctionInfo> p_v);
  compiler::TNode<Smi> LoadDebugInfoDebuggerHints(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoDebuggerHints(compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadDebugInfoScript(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoScript(compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoOriginalBytecodeArray(compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadDebugInfoDebugBytecodeArray(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoDebugBytecodeArray(compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<FixedArray> LoadDebugInfoBreakPoints(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoBreakPoints(compiler::TNode<DebugInfo> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Smi> LoadDebugInfoFlags(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoFlags(compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadDebugInfoCoverageInfo(compiler::TNode<DebugInfo> p_o);
  void StoreDebugInfoCoverageInfo(compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorSharedFunctionInfo(compiler::TNode<FeedbackVector> p_o, compiler::TNode<SharedFunctionInfo> p_v);
  compiler::TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorOptimizedCodeWeakOrSmi(compiler::TNode<FeedbackVector> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorClosureFeedbackCellArray(compiler::TNode<FeedbackVector> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Int32T> LoadFeedbackVectorLength(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorLength(compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadFeedbackVectorInvocationCount(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorInvocationCount(compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadFeedbackVectorProfilerTicks(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorProfilerTicks(compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Uint32T> LoadFeedbackVectorPadding(compiler::TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorPadding(compiler::TNode<FeedbackVector> p_o, compiler::TNode<Uint32T> p_v);
  compiler::TNode<HeapObject> LoadFeedbackCellValue(compiler::TNode<FeedbackCell> p_o);
  void StoreFeedbackCellValue(compiler::TNode<FeedbackCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Int32T> LoadFeedbackCellInterruptBudget(compiler::TNode<FeedbackCell> p_o);
  void StoreFeedbackCellInterruptBudget(compiler::TNode<FeedbackCell> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Struct> LoadAllocationMementoAllocationSite(compiler::TNode<AllocationMemento> p_o);
  void StoreAllocationMementoAllocationSite(compiler::TNode<AllocationMemento> p_o, compiler::TNode<Struct> p_v);
  compiler::TNode<Foreign> LoadWasmModuleObjectNativeModule(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectNativeModule(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<FixedArray> LoadWasmModuleObjectExportWrappers(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectExportWrappers(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Script> LoadWasmModuleObjectScript(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectScript(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Script> p_v);
  compiler::TNode<WeakArrayList> LoadWasmModuleObjectWeakInstanceList(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectWeakInstanceList(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<WeakArrayList> p_v);
  compiler::TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectAsmJsOffsetTable(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos(compiler::TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectBreakPointInfos(compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<FixedArray> LoadWasmTableObjectEntries(compiler::TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectEntries(compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Object> LoadWasmTableObjectMaximumLength(compiler::TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectMaximumLength(compiler::TNode<WasmTableObject> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadWasmTableObjectDispatchTables(compiler::TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectDispatchTables(compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Smi> LoadWasmTableObjectRawType(compiler::TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectRawType(compiler::TNode<WasmTableObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer(compiler::TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectArrayBuffer(compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<JSArrayBuffer> p_v);
  compiler::TNode<Smi> LoadWasmMemoryObjectMaximumPages(compiler::TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectMaximumPages(compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadWasmMemoryObjectInstances(compiler::TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectInstances(compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer(compiler::TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectUntaggedBuffer(compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer(compiler::TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectTaggedBuffer(compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadWasmGlobalObjectOffset(compiler::TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectOffset(compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWasmGlobalObjectFlags(compiler::TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectFlags(compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature(compiler::TNode<WasmExceptionObject> p_o);
  void StoreWasmExceptionObjectSerializedSignature(compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<HeapObject> LoadWasmExceptionObjectExceptionTag(compiler::TNode<WasmExceptionObject> p_o);
  void StoreWasmExceptionObjectExceptionTag(compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Foreign> LoadAsmWasmDataManagedNativeModule(compiler::TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataManagedNativeModule(compiler::TNode<AsmWasmData> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<FixedArray> LoadAsmWasmDataExportWrappers(compiler::TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataExportWrappers(compiler::TNode<AsmWasmData> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable(compiler::TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataAsmJsOffsetTable(compiler::TNode<AsmWasmData> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<HeapNumber> LoadAsmWasmDataUsesBitset(compiler::TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataUsesBitset(compiler::TNode<AsmWasmData> p_o, compiler::TNode<HeapNumber> p_v);
  compiler::TNode<NativeContext> LoadJSFinalizationGroupNativeContext(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupNativeContext(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<NativeContext> p_v);
  compiler::TNode<Object> LoadJSFinalizationGroupCleanup(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupCleanup(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadJSFinalizationGroupActiveCells(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupActiveCells(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSFinalizationGroupClearedCells(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupClearedCells(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadJSFinalizationGroupKeyMap(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupKeyMap(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadJSFinalizationGroupNext(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupNext(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSFinalizationGroupFlags(compiler::TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupFlags(compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup(compiler::TNode<JSFinalizationGroupCleanupIterator> p_o);
  void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup(compiler::TNode<JSFinalizationGroupCleanupIterator> p_o, compiler::TNode<JSFinalizationGroup> p_v);
  compiler::TNode<HeapObject> LoadWeakCellFinalizationGroup(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellFinalizationGroup(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWeakCellTarget(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellTarget(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadWeakCellHoldings(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellHoldings(compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadWeakCellPrev(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellPrev(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWeakCellNext(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellNext(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadWeakCellKey(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellKey(compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadWeakCellKeyListPrev(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellKeyListPrev(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadWeakCellKeyListNext(compiler::TNode<WeakCell> p_o);
  void StoreWeakCellKeyListNext(compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSWeakRefTarget(compiler::TNode<JSWeakRef> p_o);
  void StoreJSWeakRefTarget(compiler::TNode<JSWeakRef> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<FixedArray> LoadBytecodeArrayConstantPool(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayConstantPool(compiler::TNode<BytecodeArray> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<ByteArray> LoadBytecodeArrayHandlerTable(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayHandlerTable(compiler::TNode<BytecodeArray> p_o, compiler::TNode<ByteArray> p_v);
  compiler::TNode<HeapObject> LoadBytecodeArraySourcePositionTable(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArraySourcePositionTable(compiler::TNode<BytecodeArray> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Int32T> LoadBytecodeArrayFrameSize(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayFrameSize(compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadBytecodeArrayParameterSize(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayParameterSize(compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister(compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int8T> LoadBytecodeArrayOsrNestingLevel(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayOsrNestingLevel(compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
  compiler::TNode<Int8T> LoadBytecodeArrayBytecodeAge(compiler::TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayBytecodeAge(compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
  compiler::TNode<JSReceiver> LoadSortStateReceiver(compiler::TNode<SortState> p_o);
  void StoreSortStateReceiver(compiler::TNode<SortState> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Map> LoadSortStateInitialReceiverMap(compiler::TNode<SortState> p_o);
  void StoreSortStateInitialReceiverMap(compiler::TNode<SortState> p_o, compiler::TNode<Map> p_v);
  compiler::TNode<Number> LoadSortStateInitialReceiverLength(compiler::TNode<SortState> p_o);
  void StoreSortStateInitialReceiverLength(compiler::TNode<SortState> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<HeapObject> LoadSortStateUserCmpFn(compiler::TNode<SortState> p_o);
  void StoreSortStateUserCmpFn(compiler::TNode<SortState> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<BuiltinPtr> LoadSortStateSortComparePtr(compiler::TNode<SortState> p_o);
  void StoreSortStateSortComparePtr(compiler::TNode<SortState> p_o, compiler::TNode<BuiltinPtr> p_v);
  compiler::TNode<BuiltinPtr> LoadSortStateLoadFn(compiler::TNode<SortState> p_o);
  void StoreSortStateLoadFn(compiler::TNode<SortState> p_o, compiler::TNode<BuiltinPtr> p_v);
  compiler::TNode<BuiltinPtr> LoadSortStateStoreFn(compiler::TNode<SortState> p_o);
  void StoreSortStateStoreFn(compiler::TNode<SortState> p_o, compiler::TNode<BuiltinPtr> p_v);
  compiler::TNode<BuiltinPtr> LoadSortStateDeleteFn(compiler::TNode<SortState> p_o);
  void StoreSortStateDeleteFn(compiler::TNode<SortState> p_o, compiler::TNode<BuiltinPtr> p_v);
  compiler::TNode<BuiltinPtr> LoadSortStateCanUseSameAccessorFn(compiler::TNode<SortState> p_o);
  void StoreSortStateCanUseSameAccessorFn(compiler::TNode<SortState> p_o, compiler::TNode<BuiltinPtr> p_v);
  compiler::TNode<Smi> LoadSortStateMinGallop(compiler::TNode<SortState> p_o);
  void StoreSortStateMinGallop(compiler::TNode<SortState> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSortStatePendingRunsSize(compiler::TNode<SortState> p_o);
  void StoreSortStatePendingRunsSize(compiler::TNode<SortState> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<FixedArray> LoadSortStatePendingRuns(compiler::TNode<SortState> p_o);
  void StoreSortStatePendingRuns(compiler::TNode<SortState> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadSortStateWorkArray(compiler::TNode<SortState> p_o);
  void StoreSortStateWorkArray(compiler::TNode<SortState> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<FixedArray> LoadSortStateTempArray(compiler::TNode<SortState> p_o);
  void StoreSortStateTempArray(compiler::TNode<SortState> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Smi> LoadSortStateSortLength(compiler::TNode<SortState> p_o);
  void StoreSortStateSortLength(compiler::TNode<SortState> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSortStateNumberOfUndefined(compiler::TNode<SortState> p_o);
  void StoreSortStateNumberOfUndefined(compiler::TNode<SortState> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadInternalClassA(compiler::TNode<InternalClass> p_o);
  void StoreInternalClassA(compiler::TNode<InternalClass> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Number> LoadInternalClassB(compiler::TNode<InternalClass> p_o);
  void StoreInternalClassB(compiler::TNode<InternalClass> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<Smi> LoadSmiPairA(compiler::TNode<SmiPair> p_o);
  void StoreSmiPairA(compiler::TNode<SmiPair> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSmiPairB(compiler::TNode<SmiPair> p_o);
  void StoreSmiPairB(compiler::TNode<SmiPair> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSmiBoxValue(compiler::TNode<SmiBox> p_o);
  void StoreSmiBoxValue(compiler::TNode<SmiBox> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadSmiBoxUnrelated(compiler::TNode<SmiBox> p_o);
  void StoreSmiBoxUnrelated(compiler::TNode<SmiBox> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadJSDateTimeFormatIcuLocale(compiler::TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuLocale(compiler::TNode<JSDateTimeFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadJSDateTimeFormatIcuSimpleDateFormat(compiler::TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuSimpleDateFormat(compiler::TNode<JSDateTimeFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadJSDateTimeFormatIcuDateIntervalFormat(compiler::TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuDateIntervalFormat(compiler::TNode<JSDateTimeFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<HeapObject> LoadJSDateTimeFormatBoundFormat(compiler::TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatBoundFormat(compiler::TNode<JSDateTimeFormat> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSDateTimeFormatFlags(compiler::TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatFlags(compiler::TNode<JSDateTimeFormat> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadJSListFormatLocale(compiler::TNode<JSListFormat> p_o);
  void StoreJSListFormatLocale(compiler::TNode<JSListFormat> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Foreign> LoadJSListFormatIcuFormatter(compiler::TNode<JSListFormat> p_o);
  void StoreJSListFormatIcuFormatter(compiler::TNode<JSListFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Smi> LoadJSListFormatFlags(compiler::TNode<JSListFormat> p_o);
  void StoreJSListFormatFlags(compiler::TNode<JSListFormat> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadJSNumberFormatLocale(compiler::TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatLocale(compiler::TNode<JSNumberFormat> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Foreign> LoadJSNumberFormatIcuNumberFormatter(compiler::TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatIcuNumberFormatter(compiler::TNode<JSNumberFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<HeapObject> LoadJSNumberFormatBoundFormat(compiler::TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatBoundFormat(compiler::TNode<JSNumberFormat> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSNumberFormatFlags(compiler::TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatFlags(compiler::TNode<JSNumberFormat> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadJSPluralRulesLocale(compiler::TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesLocale(compiler::TNode<JSPluralRules> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Smi> LoadJSPluralRulesFlags(compiler::TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesFlags(compiler::TNode<JSPluralRules> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadJSPluralRulesIcuPluralRules(compiler::TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesIcuPluralRules(compiler::TNode<JSPluralRules> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadJSPluralRulesIcuNumberFormatter(compiler::TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesIcuNumberFormatter(compiler::TNode<JSPluralRules> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<String> LoadJSRelativeTimeFormatLocale(compiler::TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatLocale(compiler::TNode<JSRelativeTimeFormat> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Foreign> LoadJSRelativeTimeFormatIcuFormatter(compiler::TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatIcuFormatter(compiler::TNode<JSRelativeTimeFormat> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Smi> LoadJSRelativeTimeFormatFlags(compiler::TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatFlags(compiler::TNode<JSRelativeTimeFormat> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadJSLocaleIcuLocale(compiler::TNode<JSLocale> p_o);
  void StoreJSLocaleIcuLocale(compiler::TNode<JSLocale> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<String> LoadJSSegmenterLocale(compiler::TNode<JSSegmenter> p_o);
  void StoreJSSegmenterLocale(compiler::TNode<JSSegmenter> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Foreign> LoadJSSegmenterIcuBreakIterator(compiler::TNode<JSSegmenter> p_o);
  void StoreJSSegmenterIcuBreakIterator(compiler::TNode<JSSegmenter> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Smi> LoadJSSegmenterFlags(compiler::TNode<JSSegmenter> p_o);
  void StoreJSSegmenterFlags(compiler::TNode<JSSegmenter> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadJSSegmentIteratorIcuBreakIterator(compiler::TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorIcuBreakIterator(compiler::TNode<JSSegmentIterator> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadJSSegmentIteratorUnicodeString(compiler::TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorUnicodeString(compiler::TNode<JSSegmentIterator> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Smi> LoadJSSegmentIteratorFlags(compiler::TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorFlags(compiler::TNode<JSSegmentIterator> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<String> LoadJSV8BreakIteratorLocale(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorLocale(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<String> p_v);
  compiler::TNode<Foreign> LoadJSV8BreakIteratorBreakIterator(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBreakIterator(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadJSV8BreakIteratorUnicodeString(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorUnicodeString(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<HeapObject> LoadJSV8BreakIteratorBoundAdoptText(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundAdoptText(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSV8BreakIteratorBoundFirst(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundFirst(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSV8BreakIteratorBoundNext(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundNext(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSV8BreakIteratorBoundCurrent(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundCurrent(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadJSV8BreakIteratorBoundBreakType(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundBreakType(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadJSV8BreakIteratorBreakIteratorType(compiler::TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBreakIteratorType(compiler::TNode<JSV8BreakIterator> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadJSCollatorIcuCollator(compiler::TNode<JSCollator> p_o);
  void StoreJSCollatorIcuCollator(compiler::TNode<JSCollator> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<HeapObject> LoadJSCollatorBoundCompare(compiler::TNode<JSCollator> p_o);
  void StoreJSCollatorBoundCompare(compiler::TNode<JSCollator> p_o, compiler::TNode<HeapObject> p_v);
 private:
  compiler::CodeAssemblerState* state_;
};
}  // namespace internal
}  // namespace v8
#endif  // V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_
